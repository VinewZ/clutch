/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsGeneralImport } from './routes/settings/general'
import { Route as SettingsExtensionsImport } from './routes/settings/extensions'
import { Route as SettingsDevelopersImport } from './routes/settings/developers'
import { Route as ExtensionExtensionImport } from './routes/extension/$extension'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsExtensionsRoute = SettingsExtensionsImport.update({
  id: '/extensions',
  path: '/extensions',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsDevelopersRoute = SettingsDevelopersImport.update({
  id: '/developers',
  path: '/developers',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const ExtensionExtensionRoute = ExtensionExtensionImport.update({
  id: '/extension/$extension',
  path: '/extension/$extension',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/extension/$extension': {
      id: '/extension/$extension'
      path: '/extension/$extension'
      fullPath: '/extension/$extension'
      preLoaderRoute: typeof ExtensionExtensionImport
      parentRoute: typeof rootRoute
    }
    '/settings/developers': {
      id: '/settings/developers'
      path: '/developers'
      fullPath: '/settings/developers'
      preLoaderRoute: typeof SettingsDevelopersImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/extensions': {
      id: '/settings/extensions'
      path: '/extensions'
      fullPath: '/settings/extensions'
      preLoaderRoute: typeof SettingsExtensionsImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof SettingsRouteImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteRouteChildren {
  SettingsDevelopersRoute: typeof SettingsDevelopersRoute
  SettingsExtensionsRoute: typeof SettingsExtensionsRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsDevelopersRoute: SettingsDevelopersRoute,
  SettingsExtensionsRoute: SettingsExtensionsRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/extension/$extension': typeof ExtensionExtensionRoute
  '/settings/developers': typeof SettingsDevelopersRoute
  '/settings/extensions': typeof SettingsExtensionsRoute
  '/settings/general': typeof SettingsGeneralRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/extension/$extension': typeof ExtensionExtensionRoute
  '/settings/developers': typeof SettingsDevelopersRoute
  '/settings/extensions': typeof SettingsExtensionsRoute
  '/settings/general': typeof SettingsGeneralRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/extension/$extension': typeof ExtensionExtensionRoute
  '/settings/developers': typeof SettingsDevelopersRoute
  '/settings/extensions': typeof SettingsExtensionsRoute
  '/settings/general': typeof SettingsGeneralRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/extension/$extension'
    | '/settings/developers'
    | '/settings/extensions'
    | '/settings/general'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/extension/$extension'
    | '/settings/developers'
    | '/settings/extensions'
    | '/settings/general'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/extension/$extension'
    | '/settings/developers'
    | '/settings/extensions'
    | '/settings/general'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  ExtensionExtensionRoute: typeof ExtensionExtensionRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  ExtensionExtensionRoute: ExtensionExtensionRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/extension/$extension"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/developers",
        "/settings/extensions",
        "/settings/general"
      ]
    },
    "/extension/$extension": {
      "filePath": "extension/$extension.tsx"
    },
    "/settings/developers": {
      "filePath": "settings/developers.tsx",
      "parent": "/settings"
    },
    "/settings/extensions": {
      "filePath": "settings/extensions.tsx",
      "parent": "/settings"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
