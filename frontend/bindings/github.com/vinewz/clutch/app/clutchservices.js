// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as embed$0 from "../../../../embed/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../../wailsapp/wails/v3/pkg/application/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {boolean} allow
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ConfirmShell(allow) {
    let $resultPromise = /** @type {any} */($Call.ByID(2876390752, allow));
    return $resultPromise;
}

/**
 * @param {string} url
 * @returns {Promise<string> & { cancel(): void }}
 */
export function DownloadExtension(url) {
    let $resultPromise = /** @type {any} */($Call.ByID(1955004975, url));
    return $resultPromise;
}

/**
 * @param {$models.DesktopApp} app
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ExecApp(app) {
    let $resultPromise = /** @type {any} */($Call.ByID(2980717694, app));
    return $resultPromise;
}

/**
 * @returns {Promise<{ [_: string]: $models.DesktopApp }> & { cancel(): void }}
 */
export function GetDesktopApps() {
    let $resultPromise = /** @type {any} */($Call.ByID(2455285118));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.ClutchPkgJson[]> & { cancel(): void }}
 */
export function GetExtensions() {
    let $resultPromise = /** @type {any} */($Call.ByID(2246752440));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} filePath
 * @returns {Promise<$models.ClutchPkgJson | null> & { cancel(): void }}
 */
export function ParseExtensionPkgJson(filePath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1363765326, filePath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<application$0.Service[]> & { cancel(): void }}
 */
export function RegisterServices() {
    let $resultPromise = /** @type {any} */($Call.ByID(2243616331));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType6($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {embed$0.FS} assets
 * @returns {Promise<application$0.App | null> & { cancel(): void }}
 */
export function Setup(assets) {
    let $resultPromise = /** @type {any} */($Call.ByID(3477651003, assets));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType8($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleApp() {
    let $resultPromise = /** @type {any} */($Call.ByID(559805133));
    return $resultPromise;
}

/**
 * @param {string} appName
 * @param {string} cmdStr
 * @returns {Promise<string> & { cancel(): void }}
 */
export function UseShell(appName, cmdStr) {
    let $resultPromise = /** @type {any} */($Call.ByID(815386405, appName, cmdStr));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.DesktopApp.createFrom;
const $$createType1 = $Create.Map($Create.Any, $$createType0);
const $$createType2 = $models.ClutchPkgJson.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $Create.Nullable($$createType2);
const $$createType5 = application$0.Service.createFrom;
const $$createType6 = $Create.Array($$createType5);
const $$createType7 = application$0.App.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
