// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class ClutchPkgJson {
    /**
     * Creates a new ClutchPkgJson instance.
     * @param {Partial<ClutchPkgJson>} [$$source = {}] - The source object to create the ClutchPkgJson.
     */
    constructor($$source = {}) {
        if (!("clutch" in $$source)) {
            /**
             * @member
             * @type {{"name": string, "description": string, "longDescription": string, "dev": {"distDir": string, "devUrl": string}}}
             */
            this["clutch"] = {"name": "", "description": "", "longDescription": "", "dev": {"distDir": "", "devUrl": ""}};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ClutchPkgJson instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ClutchPkgJson}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ClutchPkgJson(/** @type {Partial<ClutchPkgJson>} */($$parsedSource));
    }
}

export class DesktopApp {
    /**
     * Creates a new DesktopApp instance.
     * @param {Partial<DesktopApp>} [$$source = {}] - The source object to create the DesktopApp.
     */
    constructor($$source = {}) {
        if (!("Id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Id"] = 0;
        }
        if (!("Name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("GenericName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["GenericName"] = "";
        }
        if (!("Comment" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Comment"] = "";
        }
        if (!("Icon" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Icon"] = "";
        }
        if (!("Exec" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Exec"] = "";
        }
        if (!("Terminal" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Terminal"] = "";
        }
        if (!("Keywords" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["Keywords"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DesktopApp instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DesktopApp}
     */
    static createFrom($$source = {}) {
        const $$createField7_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Keywords" in $$parsedSource) {
            $$parsedSource["Keywords"] = $$createField7_0($$parsedSource["Keywords"]);
        }
        return new DesktopApp(/** @type {Partial<DesktopApp>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
