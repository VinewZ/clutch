// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc.proto

package rpcprotoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/vinewz/clutch/backend/rpc/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ToggleWindowServiceName is the fully-qualified name of the ToggleWindowService service.
	ToggleWindowServiceName = "rpc.proto.v1.ToggleWindowService"
	// UseShellServiceName is the fully-qualified name of the UseShellService service.
	UseShellServiceName = "rpc.proto.v1.UseShellService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ToggleWindowServiceToggleWindowProcedure is the fully-qualified name of the ToggleWindowService's
	// ToggleWindow RPC.
	ToggleWindowServiceToggleWindowProcedure = "/rpc.proto.v1.ToggleWindowService/ToggleWindow"
	// UseShellServiceUseShellProcedure is the fully-qualified name of the UseShellService's UseShell
	// RPC.
	UseShellServiceUseShellProcedure = "/rpc.proto.v1.UseShellService/UseShell"
)

// ToggleWindowServiceClient is a client for the rpc.proto.v1.ToggleWindowService service.
type ToggleWindowServiceClient interface {
	ToggleWindow(context.Context, *connect.Request[gen.ToggleWindowRequest]) (*connect.Response[gen.ToggleWindowResponse], error)
}

// NewToggleWindowServiceClient constructs a client for the rpc.proto.v1.ToggleWindowService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewToggleWindowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ToggleWindowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	toggleWindowServiceMethods := gen.File_rpc_proto.Services().ByName("ToggleWindowService").Methods()
	return &toggleWindowServiceClient{
		toggleWindow: connect.NewClient[gen.ToggleWindowRequest, gen.ToggleWindowResponse](
			httpClient,
			baseURL+ToggleWindowServiceToggleWindowProcedure,
			connect.WithSchema(toggleWindowServiceMethods.ByName("ToggleWindow")),
			connect.WithClientOptions(opts...),
		),
	}
}

// toggleWindowServiceClient implements ToggleWindowServiceClient.
type toggleWindowServiceClient struct {
	toggleWindow *connect.Client[gen.ToggleWindowRequest, gen.ToggleWindowResponse]
}

// ToggleWindow calls rpc.proto.v1.ToggleWindowService.ToggleWindow.
func (c *toggleWindowServiceClient) ToggleWindow(ctx context.Context, req *connect.Request[gen.ToggleWindowRequest]) (*connect.Response[gen.ToggleWindowResponse], error) {
	return c.toggleWindow.CallUnary(ctx, req)
}

// ToggleWindowServiceHandler is an implementation of the rpc.proto.v1.ToggleWindowService service.
type ToggleWindowServiceHandler interface {
	ToggleWindow(context.Context, *connect.Request[gen.ToggleWindowRequest]) (*connect.Response[gen.ToggleWindowResponse], error)
}

// NewToggleWindowServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewToggleWindowServiceHandler(svc ToggleWindowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	toggleWindowServiceMethods := gen.File_rpc_proto.Services().ByName("ToggleWindowService").Methods()
	toggleWindowServiceToggleWindowHandler := connect.NewUnaryHandler(
		ToggleWindowServiceToggleWindowProcedure,
		svc.ToggleWindow,
		connect.WithSchema(toggleWindowServiceMethods.ByName("ToggleWindow")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc.proto.v1.ToggleWindowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ToggleWindowServiceToggleWindowProcedure:
			toggleWindowServiceToggleWindowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedToggleWindowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedToggleWindowServiceHandler struct{}

func (UnimplementedToggleWindowServiceHandler) ToggleWindow(context.Context, *connect.Request[gen.ToggleWindowRequest]) (*connect.Response[gen.ToggleWindowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.proto.v1.ToggleWindowService.ToggleWindow is not implemented"))
}

// UseShellServiceClient is a client for the rpc.proto.v1.UseShellService service.
type UseShellServiceClient interface {
	UseShell(context.Context, *connect.Request[gen.UseShellRequest]) (*connect.Response[gen.UseShellResponse], error)
}

// NewUseShellServiceClient constructs a client for the rpc.proto.v1.UseShellService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUseShellServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UseShellServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	useShellServiceMethods := gen.File_rpc_proto.Services().ByName("UseShellService").Methods()
	return &useShellServiceClient{
		useShell: connect.NewClient[gen.UseShellRequest, gen.UseShellResponse](
			httpClient,
			baseURL+UseShellServiceUseShellProcedure,
			connect.WithSchema(useShellServiceMethods.ByName("UseShell")),
			connect.WithClientOptions(opts...),
		),
	}
}

// useShellServiceClient implements UseShellServiceClient.
type useShellServiceClient struct {
	useShell *connect.Client[gen.UseShellRequest, gen.UseShellResponse]
}

// UseShell calls rpc.proto.v1.UseShellService.UseShell.
func (c *useShellServiceClient) UseShell(ctx context.Context, req *connect.Request[gen.UseShellRequest]) (*connect.Response[gen.UseShellResponse], error) {
	return c.useShell.CallUnary(ctx, req)
}

// UseShellServiceHandler is an implementation of the rpc.proto.v1.UseShellService service.
type UseShellServiceHandler interface {
	UseShell(context.Context, *connect.Request[gen.UseShellRequest]) (*connect.Response[gen.UseShellResponse], error)
}

// NewUseShellServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUseShellServiceHandler(svc UseShellServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	useShellServiceMethods := gen.File_rpc_proto.Services().ByName("UseShellService").Methods()
	useShellServiceUseShellHandler := connect.NewUnaryHandler(
		UseShellServiceUseShellProcedure,
		svc.UseShell,
		connect.WithSchema(useShellServiceMethods.ByName("UseShell")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc.proto.v1.UseShellService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UseShellServiceUseShellProcedure:
			useShellServiceUseShellHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUseShellServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUseShellServiceHandler struct{}

func (UnimplementedUseShellServiceHandler) UseShell(context.Context, *connect.Request[gen.UseShellRequest]) (*connect.Response[gen.UseShellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.proto.v1.UseShellService.UseShell is not implemented"))
}
